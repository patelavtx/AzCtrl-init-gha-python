name: Running AzController deployment build and init
on:
  push:
    branches: [ main ]

jobs:
  validate:
    name: Run on ubuntu hosted
    runs-on: ubuntu-latest
    #name: Run on self hosted ubuntu in Azure
    #runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
        with: 
          terraform_version: '1.3.3'
      - uses: actions/setup-python@v4
        with:
          python-version: '3.8'
          cache: 'pip'
      - run:  pip install -r requirements.txt

      # Log into Azure with oidc integration
      #- name: 'Az CLI login'
      #  uses: azure/login@v1
      #  with:
      #    ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      #    ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      #    ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      #    ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    
    # Run az commands to confirm access
      #- name: 'Run AZ commands'
      #  run: |
      #    az account show
      
  # tf init; need to add backend.tf for state
      - name: terraform-init
        id: init
        env:
          TF_VAR_resource_group_name: ${{ secrets.RESOURCE_GROUP_NAME}}
          TF_VAR_storage_account_name: ${{ secrets.STORAGE_ACCOUNT_NAME}}
          TF_VAR_container_name: ${{ secrets.CONTAINER_NAME}}
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        run: terraform init
  
  # Run Terraform stuff      
      - name: terraform fmt
        id: fmt
        run: terraform fmt
        continue-on-error: true     
        
  # Run Validate       
      - name: terraform-validate
        id: validate
        run: terraform validate
  
  # Run Plan
      - name: terraform-plan
        id: plan
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          TF_VAR_aviatrix_customer_id: ${{ secrets.TF_VAR_AVIATRIX_CUSTOMER_ID}}
          TF_VAR_application_id: ${{ secrets.TF_VAR_APPLICATION_ID}}
          TF_VAR_application_key: ${{ secrets.TF_VAR_APPLICATION_KEY}}
          TF_VAR_directory_id: ${{ secrets.TF_VAR_DIRECTORY_ID}}
          TF_VAR_subscription_id: ${{ secrets.TF_VAR_SUBSCRIPTION_ID}}
          TF_VAR_controller_name: ${{ vars.CONTROLLER_NAME}}
          TF_VAR_controller_version: ${{ vars.CONTROLLER_VERSION}}
          TF_VAR_location: ${{ vars.LOCATION}}
        run: terraform plan
   
   # Run Apply
      - name: terraform-apply
        id: apply
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          TF_VAR_aviatrix_customer_id: ${{ secrets.TF_VAR_AVIATRIX_CUSTOMER_ID}}
          TF_VAR_application_id: ${{ secrets.TF_VAR_APPLICATION_ID}}
          TF_VAR_application_key: ${{ secrets.TF_VAR_APPLICATION_KEY}}
          TF_VAR_directory_id: ${{ secrets.TF_VAR_DIRECTORY_ID}}
          TF_VAR_subscription_id: ${{ secrets.TF_VAR_SUBSCRIPTION_ID}}
          TF_VAR_controller_name: ${{ vars.CONTROLLER_NAME}}
          TF_VAR_controller_version: ${{ vars.CONTROLLER_VERSION}}
          TF_VAR_location: ${{ vars.LOCATION}}
        run: terraform apply -auto-approve
